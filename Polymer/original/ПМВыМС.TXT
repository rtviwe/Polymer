import os
import pylab
from matplotlib import pyplot
from mpl_toolkits.mplot3d import Axes3D
from lammps import lammps
lmp = lammps()

def gen_in_file(args):
    text = '''
units           metal
atom_style      atomic
boundary        p p p

pair_style     airebo   1.5

read_data       %s

pair_coeff * *  CH.airebo C H

timestep        %s

thermo  100
thermo_style    custom step temp  etotal vol press pe epair xlo xhi pxx pyy pzz

fix             1 all nvt temp 1 %s 0.01
dump            2 all cfg %s  %s.*.cfg id type xs ys zs
dump_modify     2 element C H
run             %s

unfix	1
fix             2 all nvt temp %s  %s 0.01
dump_modify     2 element C H
run             %s
''' % args
    in_file = open(os.getcwd() + '/in.relax')
    in_file.writelines(text)


def plot_chain(args):
    (bead_number,C_in_tubes,C_coord_x,C_coord_y,C_coord_z) = args
    color=['red','green','blue','yellow','black','pink']
    fig = pylab.figure()
    ax = Axes3D(fig)
    for i in range(C_in_tubes):
        ax.scatter(C_coord_x[i],C_coord_y[i],C_coord_z[i],c='black')
    for i2 in range(len(C_coord_x) - C_in_tubes):
        i=i2+C_in_tubes
        ax.scatter(C_coord_x[i],C_coord_y[i],C_coord_z[i],c=color[(i2//(bead_number+2)) % len(color)])
    pyplot.show()


def write_in_file(args):
    (chain_numb, bead_number,C_in_tubes,C_coord_x,C_coord_y,C_coord_z) = args

    f = open(os.getcwd() + str(bead_number)+'_'+str(chain_numb)+ '.data','w')

    #GENERATE HEAD OF THE FILE
    f.write('\n' + str(len(C_coord_x) + len(H_coord_x)) + ' atoms' +'\n')
    f.write('2 atom types' + '\n' + '\n')
    f.write(str(-box_x/2 - 1) + ' ' + str(box_x/2 + 1)  + ' xlo xhi' + '\n')
    f.write(str(-box_y/2 - 1) + ' ' + str(box_y/2 + 1)  + ' ylo yhi' + '\n')
    f.write(str(-box_z/2 - 1) + ' ' + str(box_z/2 + 1)  + ' zlo zhi' + '\n' + '\n')
    f.write('Masses' + '\n' + '\n' + '1 12.0' +'\n'+ '2 1.0' + '\n' + '\n' 'Atoms' + '\n' + '\n')


    for i in range(len(C_coord_x)):
        f.write(str(i+1) + ' '+ '1 '  + str(C_coord_x[i])+' '+  str(C_coord_y[i]) +' '+ str(C_coord_z[i]) +'\n')
    for i in range(len(H_coord_x)):
        f.write(str(i+1 + len(C_coord_x)) + ' '+ '2 '  + str(H_coord_x[i])+' '+  str(H_coord_y[i]) +' '+ str(H_coord_z[i]) +'\n')