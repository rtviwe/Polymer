__author__ = 'kelsen'

import os
import sys

MPNCS_ver='1.0'
Python_ver=sys.version[:6]
LAMMPS_version = s = os.popen('echo "quit" | ./LAMMPS/lmp_polymer').read().replace("\n","")
print('Multiscale Polymer NanoComposite Simusator v %s' % MPNCS_ver)
print('Python v %s' % Python_ver)
print('Lammps library package %s' % LAMMPS_version)


class inp():
    def __init__(self):
        inp.name = 'default task'
        inp.box_x=200
        inp.box_y=200
        inp.box_z=200
        inp.inc_type='nanotube'
        inp.inc_size=100
        inp.inc_numb=10
        inp.inc_ch_length=5000
        inp.density=0.8

        inp.step_numb=1000000
        inp.step=0.005
        inp.temp=300
        inp.pres=1
        inp.cfg_step=10000

        inp.def_step_numb=1000000
        inp.def_x=1
        inp.def_y=1
        inp.def_z=1


inp()
default_flag = 0

while True:
    key = input('\n>>>')
    if(key == 'start generation default'):
        print('default values')
        default_flag = 1
        break
    if(key == 'start generation'):
        print('Enter parameters:')
        break
    else:
        print('Unknown Command')

while True*(not default_flag):
    key = input('\nJob name =')
    try:
        inp.name = key
        print('Job name = %s' % inp.name)
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nCell size (x y z) =')
    try:
        inp.box_x=float(key.split()[0])
        inp.box_y=float(key.split()[1])
        inp.box_z=float(key.split()[2])
        print('%s x %s x %s Angstrom' % (str(inp.box_x),str(inp.box_y),str(inp.box_z)))
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nInclusion type =')
    try:
        inp.inc_type = key
        print('Inclusion type: %s' % inp.inc_type)
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nInclusion size =')
    try:
        inp.inc_size = float(key)
        print('Inclusion size: %s' % str(inp.inc_size))
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nNumber of inclusions =')
    try:
        inp.inc_numb = int(key)
        print('Number of inclusions: %s' % str(inp.inc_numb))
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nPolymer chain length =')
    try:
        inp.inc_ch_length = int(key)
        print('Polymer chain length: %s' % str(inp.inc_ch_length))
        break
    except:
        print('wrong data type')

while True*(not default_flag):
    key = input('\nDensity =')
    try:
        inp.density = float(key)
        print('Density: %s g/cm3' % str(inp.density))
        break
    except:
        print('wrong data type')


print('\n\nGenerated file "%s.data"' % inp.name)


default_relax_flag = 0
while True:
    key = input('\n>>>')
    if(key == 'start relaxation default'):
        print('default values')
        default_relax_flag = 1
        break
    if(key == 'start relaxation'):
        print('Enter parameters:')
        break
    else:
        print('Unknown Command')

while True*(not default_relax_flag):
    key = input('\nNumber of steps =')
    try:
        inp.step_numb = int(key)
        print('Number of steps: %s' % str(inp.step_numb))
        break
    except:
        print('wrong data type')

while True*(not default_relax_flag):
    key = input('\nStep (ps) =')
    try:
        inp.step = float(key)
        print('Step:%s ps' % str(inp.step))
        break
    except:
        print('wrong data type')

while True*(not default_relax_flag):
    key = input('\nTemperature =')
    try:
        inp.temp = float(key)
        print('Temperature: %s' % str(inp.temp))
        break
    except:
        print('wrong data type')

while True*(not default_relax_flag):
    key = input('\nPressure (bar) =')
    try:
        inp.pres = float(key)
        print('Pressure: %s bar' % str(inp.pres))
        break
    except:
        print('wrong data type')

while True*(not default_relax_flag):
    key = input('\nGenerate cfg every X steps =')
    try:
        inp.cfg_step = int(key)
        print('Generate cfg every %s steps' % str(inp.cfg_step))
        break
    except:
        print('wrong data type')

print('\n\nGenerated in-file "in_relax.%s"' % inp.name)

default_def_flag = 0
while True:
    key = input('\n>>>')
    if(key == 'start deformation default'):
        print('default values')
        default_def_flag = 1
        break
    if(key == 'start deformation'):
        print('Enter parameters:')
        break
    else:
        print('Unknown Command')

while True*(not default_def_flag):
    key = input('\nNumber of steps (deformation) =')
    try:
        inp.def_step_numb = int(key)
        print('Number of steps: %s' % str(inp.def_step_numb))
        break
    except:
        print('wrong data type')

while True*(not default_def_flag):
    key = input('\nDeformation (dx dy dz) =')
    try:
        inp.def_x=float(key.split()[0])
        inp.def_y=float(key.split()[1])
        inp.def_z=float(key.split()[2])
        print('Deformation %s x %s x %s Angstrom' % (str(inp.def_x),str(inp.def_y),str(inp.def_z)))
        break
    except:
        print('wrong data type')


print('\n\nGenerated in-file "in_deform.%s"' % inp.name)